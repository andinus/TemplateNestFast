#+title: Template::Nest::Fast
#+subtitle: manipulate a generic template structure via a Raku hash

* Documentation

~Template::Nest::Fast~ is a high-performance template engine module for
Raku, designed to process nested templates quickly and efficiently.
This module improves on the original ~Template::Nest~ module by caching
the index of positions of variables, resulting in significantly faster
processing times.

For more details on ~Template::Nest~ visit:
https://metacpan.org/pod/Template::Nest

Note: This module was created by me as a proof-of-concept to benchmark
against ~Template::Nest::XS~. Tom Gracey (virtual.blue) is currently
sponsoring for the development of this module. He authored
~Template::Nest~ originally in Perl 5.

Note: This module is currently a work in-progress. The goal is to have
100% compatibility with ~Template::Nest~ (Raku).

** Options

- ~name-label~ (default ~TEMPLATE~): Represents the label used for
  identifying the template name in the hash of template variables.

- ~template-dir~: IO object representing the directory where the
  templates are located.

- ~die-on-bad-params~ (default: ~True~): If True, then an attempt to
  populate a template with a variable that doesn't exist (i.e. name
  not found in template file) results in an error.

  Note that it allows to leave variables undefined (i.e. name found in
  template file but not defined in template hash). Undefined variables
  are replaced with empty string. This is for compatibility with
  Template::Nest (Raku).

- ~show-labels~ (default: ~False~): If True, an string is appended to
  every rendered template which is helpful in identifying which
  template the output text came from. This is useful in development
  when you have many templates.

  Example:
  #+begin_src html
<!-- BEGIN 00-simple-page -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Simple Page</title>
  </head>
  <body>
    <p>A fairly simple page to test the performance of Template::Nest.</p>
    <p>Simple Variable</p>
    <!-- BEGIN 01-simple-component -->
<p>Simple Variable in Simple Component</p>
<!-- END 01-simple-component -->
  </body>
</html>
<!-- END 00-simple-page -->
  #+end_src

  Here, 'BEGIN' & 'END' blocks have been added because ~show-labels~
  was set to True.

  If you're not templating HTML and still want labels, you can set
  ~comment-delims~.

- ~comment-delims~ (default: ~['<!--', '-->']~): Use this in
  conjunction with ~show-labels~. Expects a 2 element array. Example,
  for templating JS you could do:

  #+begin_src raku
my $nest-alt = Template::Nest::Fast.new(
    :$template-dir, :show-labels, comment-delims => ['/*', '*/']
);
  #+end_src

  Example output:
  #+begin_src js
/* BEGIN js-file */
...
/* END js-file */
  #+end_src

  You can set the second comment token as an empty string if the
  language you are templating does not use one. Example, for
  templating Raku you could do:

  #+begin_src raku
my $nest-alt = Template::Nest::Fast.new(
    :$template-dir, :show-labels, comment-delims => ['#', '']
);
  #+end_src

  Example output:
  #+begin_src raku
# BEGIN raku-file
...
# END raku-file */
  #+end_src

- ~template-extension~ (default: ~html~): get/set the template
  extension. This is so you can save typing your template extension
  all the time if it's always the same. There is no reason why this
  templating system could not be used to construct any other type of
  file (or why you could not use another extension even if you were
  producing html). Example, to manipulate JavaScript files, this will
  look for ~30-main.js~ in ~$template-dir~:

  #+begin_src raku
my $nest-js = Template::Nest::Fast.new: :$template-dir, :template-extension('js');
my %simple-page-js = %(
    TEMPLATE => '30-main',
    var => 'Simple Variable',
);
  #+end_src

  Or if you have an empty ~template-extension~, this will look for
  ~30-main.html~ in ~$template-dir~:
  #+begin_src raku
my $nest = Template::Nest::Fast.new: :$template-dir, :template-extension('');
my %simple-page-js = %(
    TEMPLATE => '30-main.html',
    var => 'Simple Variable',
);
  #+end_src

** Methods

- ~render~: Converts a template structure to output text. See Example
  for details.

** Example

This is a simple example that injects a variable in a template. We use
another template as a component as well.

#+begin_src raku
use Template::Nest::Fast;

# Create a nest object.
my $nest = Template::Nest::Fast.new( template-dir => 'templates/'.IO );

# Declare template structure.
my %simple-page = %(
    TEMPLATE => '00-simple-page',
    variable => 'Simple Variable',
    simple_component => %(
        TEMPLATE => '01-simple-component',
        variable => 'Simple Variable in Simple Component'
    )
);

# Render the page.
put $nest.render(%simple-page);
#+end_src

Templates:
~templates/00-simple-page.html~:
#+begin_src html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Simple Page</title>
  </head>
  <body>
    <p>A fairly simple page to test the performance of Template::Nest.</p>
    <p><!--% variable %--></p>
    <!--% simple_component %-->
  </body>
</html>
#+end_src

~templates/01-simple-component.html~:
#+begin_src html
<p><!--% variable %--></p>
#+end_src

Output:
#+begin_src html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Simple Page</title>
  </head>
  <body>
    <p>A fairly simple page to test the performance of Template::Nest.</p>
    <p>Simple Variable</p>
    <p>Simple Variable in Simple Component</p>
  </body>
</html>
#+end_src

* News

** v0.1.0 - 2023-03-28

+ Initial Release.
